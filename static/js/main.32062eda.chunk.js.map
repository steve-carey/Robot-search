{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflow","border","height","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gOAceA,EAZH,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GACvB,OACI,sBAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAI,QAAOC,IAAG,+BAA2BH,EAA3B,cACnB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHXS,SCKfC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAY,MAAjB,SACI,uBACIA,UAAY,mCACZU,KAAM,SACNC,YAAY,gBACZC,SAAYH,OCabI,E,kDAnBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACGC,MAAQ,CACTC,UAAU,GAHJ,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAG5B,WACI,OAAGG,KAAKJ,MAAMC,SACH,+DAEJG,KAAKL,MAAMO,a,GAhBEC,aCQbC,G,MARA,SAACT,GACZ,OACI,qBAAKU,MAAQ,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKb,EAAMO,aC0CJO,E,kDAtCX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GACd,EAAKV,SAAS,CAACW,YAAaD,EAAME,OAAOC,SAZzC,EAAKlB,MAAQ,CACTX,OAAQ,GACR2B,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKlB,SAAS,CAAChB,OAAQkC,S,oBAM1C,WAAU,MACwBnB,KAAKJ,MAA5BX,EADD,EACCA,OAAQ2B,EADT,EACSA,YACTQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAE1D,OAAQtC,EAAOwC,OAGN,sBAAK5C,UAAY,KAAjB,UACI,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWS,aAAcU,KAAKU,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQmC,WAPlC,6C,GAxBMjB,aCIHuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.32062eda.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name, email, id}) =>{\r\n    return(\r\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot'src ={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            { \r\n                robots.map((user, i) => {       \r\n                    return (\r\n                    <Card \r\n                        key ={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type ='search' \r\n                placeholder='search robots'\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n            this.state = {\r\n                hasError: false\r\n            }\r\n        }\r\n    \r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError) {\r\n            return <h1>Opps, error. THat is not gooD</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{overflow: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport '../components/ErrorBoundary'\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends Component{ //parent passes state to robot\r\n    constructor(){ //App owns the states- so use constructor function \r\n        super()\r\n        this.state = { // App component has 2 states (robots and searchfield)\r\n            robots: [], // these state are passed down to render() as props\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value}); //each time theres a change\r\n    }\r\n\r\n    render () { //communicates with cardList to find searched robots\r\n        const {robots, searchfield} = this.state;//destructuring  \r\n        const filteredRobots = robots.filter(robot =>{ //filters robots according to searchfield\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase()) //only includes robots from the searchfield\r\n        })\r\n       return !robots.length ? //if there's no robots\r\n            <h1>Loading</h1> : //loading screen\r\n        (                       //if there are robots\r\n                <div className = 'tc'>\r\n                    <h1 className = 'f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary> \r\n                    </Scroll>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}